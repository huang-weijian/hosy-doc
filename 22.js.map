{"version":3,"sources":["webpack:///./src/views/DemoToast/DemoToast.tsx"],"names":["DemoToast","props","title","language","style","type","round","onClick","msg","duration","loading","success","error","iconNode","then","console","info","clear","showMask","block","bodyStyle","color","backgroundColor","position","defaultProps","age","auth","name"],"mappings":"wJA8FA,SAASA,EAAUC,GACjB,OACE,gCACE,cAAC,IAAS,CAACC,MAAO,cAAO,GACzB,cAAC,IAAS,CAACA,MAAO,cAAO,GACzB,cAAC,IAAiB,eAACC,SAAU,aAAcC,MAAO,KAAa,UApFpD,gvCAqFA,GAEX,0DACA,kEACA,kDACA,+DACA,cAAC,IAAS,CAACF,MAAO,gBAAS,GAC3B,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBAAM,YAAM,CAAEC,IAAK,YAAaC,SAAU,QAAO,mCAI5D,cAAC,IAAS,CAACP,MAAO,gBAAS,GAC3B,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBAAM,IAAMG,QAAQ,CAAEF,IAAK,cAAY,oCAIlD,cAAC,IAAS,CAACN,MAAO,gBAAS,GAC3B,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBAAM,IAAMI,QAAQ,CAAEH,IAAK,cAAY,oCAIlD,cAAC,IAAS,CAACN,MAAO,cAAO,GACzB,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBAAM,IAAMK,MAAM,CAAEJ,IAAK,YAAU,kCAI9C,cAAC,IAAS,CAACN,MAAO,gCAAyB,GAC3C,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBACP,YAAM,CACJC,IAAK,kBACLK,SAAU,2DACTC,MAAK,kBAAMC,QAAQC,KAAK,kCAA6B,sCAK5D,cAAC,IAAS,CAACd,MAAO,4BAAqB,GACvC,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBACP,YAAM,CACJF,KAAM,UACNG,IAAK,YACLC,UAAW,MACX,gCAKN,cAAC,IAAM,eAACJ,KAAM,SAAUE,QAAS,kBAAM,IAAMU,UAAO,+BAGpD,cAAC,IAAS,CAACf,MAAO,sBAAe,GACjC,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBACP,YAAM,CACJF,KAAM,UACNG,IAAK,aACJM,MAAK,kBAAMC,QAAQC,KAAK,kCAA6B,+BAK5D,cAAC,IAAS,CAACd,MAAO,iBAAU,GAC5B,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBACP,YAAM,CACJF,KAAM,UACNG,IAAK,WACLU,UAAU,MACV,2BAKN,cAAC,IAAS,CAAChB,MAAO,8BAAuB,GACzC,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLa,OAAK,EACLZ,QAAS,kBACP,YAAM,CACJF,KAAM,UACNe,UAAW,CAAEC,MAAO,UAAWC,gBAAiB,WAChDd,IAAK,aACLU,UAAU,MACV,sCAKN,cAAC,IAAS,CAAChB,MAAO,4BAAqB,GACvC,cAAC,IAAM,eACLG,KAAM,UACNC,OAAK,EACLC,QAAS,kBAAM,YAAM,CAAEgB,SAAU,MAAOf,IAAK,cAAY,8BAI3D,cAAC,IAAM,eACLH,KAAM,UACNC,OAAK,EACLC,QAAS,kBAAM,YAAM,CAAEgB,SAAU,SAAUf,IAAK,iBAAe,wCAGxD,IAKf,SAAUR,GACK,EAAAwB,aAA+B,CAC1CC,IAAK,GACLC,KAAM,CACJC,KAAM,sBAJZ,CAAU3B,MAAS,KASJ","file":"22.js","sourcesContent":["import { Button, Toast } from \"@hs\";\nimport SplitLine from \"@/components/SplitLine/SplitLine\";\nimport { RouteComponentProps } from \"react-router\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { androidstudio } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nexport declare interface DemoToastProps {\n  name?: string;\n  age?: number;\n  auth?: {\n    email?: string;\n    name?: string;\n  };\n}\n\nconst propsStr = `interface IToastMsg {\n  /**\n   * 消息的类型\n   * toast theme type\n   */\n  type?: toastTypes;\n  /**\n   * Toast位置\n   * Toast Position\n   */\n  position?: toastPositions;\n  /**\n   * 展示或隐藏Icon\n   * show or hide Icon\n   */\n  showIcon?: boolean;\n  /**\n   * 自定义Icon节点\n   * custom Icon Node\n   */\n  iconNode?: ReactChild;\n  /**\n   * toast消息\n   * toast msg\n   */\n  msg?: string;\n  /**\n   * toast持续时间\n   * toast duration time unit ms\n   * -1为不关闭\n   */\n  duration?: number;\n  /**\n   * Toast的样式\n   * Toast className\n   */\n  toastClassName?: string;\n  /**\n   * Toast的style\n   * Toast style\n   */\n  toastStyle?: CSSProperties;\n  /**\n   * Toast body的样式\n   * Toast body className\n   */\n  bodyClassName?: string;\n  /**\n   * Toast body的style\n   * Toast body style\n   */\n  bodyStyle?: CSSProperties;\n  /**\n   * Toast msg的样式\n   * Toast msg className\n   */\n  msgClassName?: string;\n  /**\n   * Toast msg的style\n   * Toast msg style\n   */\n  msgStyle?: CSSProperties;\n  /**\n   * Toast mask的样式\n   * Toast mask className\n   */\n  maskClassName?: string;\n  /**\n   * Toast mask的style\n   * Toast mask style\n   */\n  maskStyle?: CSSProperties;\n  /**\n   * 展示或隐藏遮罩层\n   * show or hide mask\n   */\n  showMask?: boolean;\n}`;\n\nfunction DemoToast(props: DemoToastProps & RouteComponentProps) {\n  return (\n    <div>\n      <SplitLine title={\"Toast\"}></SplitLine>\n      <SplitLine title={\"props\"}></SplitLine>\n      <SyntaxHighlighter language={\"typescript\"} style={androidstudio}>\n        {propsStr}\n      </SyntaxHighlighter>\n      <p>Toast的自带图标是dom和css</p>\n      <p>Toast's icons are dom node</p>\n      <p>Toast是单例模式</p>\n      <p>Toast is Singleton mode</p>\n      <SplitLine title={\"no icon\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() => Toast({ msg: \"test info\", duration: 3000 })}\n      >\n        noicon toast\n      </Button>\n      <SplitLine title={\"loading\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() => Toast.loading({ msg: \"loading\" })}\n      >\n        loading toast\n      </Button>\n      <SplitLine title={\"success\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() => Toast.success({ msg: \"success\" })}\n      >\n        success toast\n      </Button>\n      <SplitLine title={\"error\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() => Toast.error({ msg: \"error\" })}\n      >\n        error toast\n      </Button>\n      <SplitLine title={\"自定义Icon custom IconNode\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() =>\n          Toast({\n            msg: \"custom IconNode\",\n            iconNode: <div>custom IconNode</div>,\n          }).then(() => console.info(\"custom IconNode is closed\"))\n        }\n      >\n        custom IconNode\n      </Button>\n      <SplitLine title={\"持续loading continued\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() =>\n          Toast({\n            type: \"loading\",\n            msg: \"continued\",\n            duration: -1,\n          })\n        }\n      >\n        continued\n      </Button>\n      <Button type={\"danger\"} onClick={() => Toast.clear()}>\n        关闭 close\n      </Button>\n      <SplitLine title={\"关闭回调 onClosed\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() =>\n          Toast({\n            type: \"loading\",\n            msg: \"onClosed\",\n          }).then(() => console.info(\"on Closed Toast is closed\"))\n        }\n      >\n        onClosed\n      </Button>\n      <SplitLine title={\"遮罩层 mask\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() =>\n          Toast({\n            type: \"loading\",\n            msg: \"onClosed\",\n            showMask: true,\n          })\n        }\n      >\n        mask\n      </Button>\n      <SplitLine title={\"自定义消息 custom msg body\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        block\n        onClick={() =>\n          Toast({\n            type: \"success\",\n            bodyStyle: { color: \"#67c23a\", backgroundColor: \"#909399\" },\n            msg: \"custom msg\",\n            showMask: true,\n          })\n        }\n      >\n        custom msg body\n      </Button>\n      <SplitLine title={\"各个位置消息 msg position\"}></SplitLine>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() => Toast({ position: \"top\", msg: \"top msg\" })}\n      >\n        top msg\n      </Button>\n      <Button\n        type={\"primary\"}\n        round\n        onClick={() => Toast({ position: \"bottom\", msg: \"bottom msg\" })}\n      >\n        bottom msg\n      </Button>\n    </div>\n  );\n}\n\nnamespace DemoToast {\n  export const defaultProps: DemoToastProps = {\n    age: 24,\n    auth: {\n      name: \"git+huang-weijian\",\n    },\n  };\n}\n\nexport default DemoToast;\n"],"sourceRoot":""}